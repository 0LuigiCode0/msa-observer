// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package msa_observer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObserverClient is the client API for Observer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObserverClient interface {
	PushFirst(ctx context.Context, in *RequestPushFirst, opts ...grpc.CallOption) (*ResponsePushFirst, error)
	PushStats(ctx context.Context, in *RequestPushStats, opts ...grpc.CallOption) (*Response, error)
	PushStatus(ctx context.Context, in *RequestPushStatus, opts ...grpc.CallOption) (*Response, error)
	Who(ctx context.Context, in *RequestWho, opts ...grpc.CallOption) (*ResponseWho, error)
	RestartService(ctx context.Context, in *RequestRestartService, opts ...grpc.CallOption) (*Response, error)
}

type observerClient struct {
	cc grpc.ClientConnInterface
}

func NewObserverClient(cc grpc.ClientConnInterface) ObserverClient {
	return &observerClient{cc}
}

func (c *observerClient) PushFirst(ctx context.Context, in *RequestPushFirst, opts ...grpc.CallOption) (*ResponsePushFirst, error) {
	out := new(ResponsePushFirst)
	err := c.cc.Invoke(ctx, "/msa_observer.Observer/PushFirst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observerClient) PushStats(ctx context.Context, in *RequestPushStats, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/msa_observer.Observer/PushStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observerClient) PushStatus(ctx context.Context, in *RequestPushStatus, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/msa_observer.Observer/PushStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observerClient) Who(ctx context.Context, in *RequestWho, opts ...grpc.CallOption) (*ResponseWho, error) {
	out := new(ResponseWho)
	err := c.cc.Invoke(ctx, "/msa_observer.Observer/Who", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observerClient) RestartService(ctx context.Context, in *RequestRestartService, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/msa_observer.Observer/RestartService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObserverServer is the server API for Observer service.
// All implementations must embed UnimplementedObserverServer
// for forward compatibility
type ObserverServer interface {
	PushFirst(context.Context, *RequestPushFirst) (*ResponsePushFirst, error)
	PushStats(context.Context, *RequestPushStats) (*Response, error)
	PushStatus(context.Context, *RequestPushStatus) (*Response, error)
	Who(context.Context, *RequestWho) (*ResponseWho, error)
	RestartService(context.Context, *RequestRestartService) (*Response, error)
	mustEmbedUnimplementedObserverServer()
}

// UnimplementedObserverServer must be embedded to have forward compatible implementations.
type UnimplementedObserverServer struct {
}

func (UnimplementedObserverServer) PushFirst(context.Context, *RequestPushFirst) (*ResponsePushFirst, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFirst not implemented")
}
func (UnimplementedObserverServer) PushStats(context.Context, *RequestPushStats) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushStats not implemented")
}
func (UnimplementedObserverServer) PushStatus(context.Context, *RequestPushStatus) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushStatus not implemented")
}
func (UnimplementedObserverServer) Who(context.Context, *RequestWho) (*ResponseWho, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Who not implemented")
}
func (UnimplementedObserverServer) RestartService(context.Context, *RequestRestartService) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartService not implemented")
}
func (UnimplementedObserverServer) mustEmbedUnimplementedObserverServer() {}

// UnsafeObserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObserverServer will
// result in compilation errors.
type UnsafeObserverServer interface {
	mustEmbedUnimplementedObserverServer()
}

func RegisterObserverServer(s grpc.ServiceRegistrar, srv ObserverServer) {
	s.RegisterService(&Observer_ServiceDesc, srv)
}

func _Observer_PushFirst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPushFirst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).PushFirst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msa_observer.Observer/PushFirst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).PushFirst(ctx, req.(*RequestPushFirst))
	}
	return interceptor(ctx, in, info, handler)
}

func _Observer_PushStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPushStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).PushStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msa_observer.Observer/PushStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).PushStats(ctx, req.(*RequestPushStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _Observer_PushStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPushStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).PushStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msa_observer.Observer/PushStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).PushStatus(ctx, req.(*RequestPushStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Observer_Who_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWho)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).Who(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msa_observer.Observer/Who",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).Who(ctx, req.(*RequestWho))
	}
	return interceptor(ctx, in, info, handler)
}

func _Observer_RestartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRestartService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).RestartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msa_observer.Observer/RestartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).RestartService(ctx, req.(*RequestRestartService))
	}
	return interceptor(ctx, in, info, handler)
}

// Observer_ServiceDesc is the grpc.ServiceDesc for Observer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Observer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msa_observer.Observer",
	HandlerType: (*ObserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushFirst",
			Handler:    _Observer_PushFirst_Handler,
		},
		{
			MethodName: "PushStats",
			Handler:    _Observer_PushStats_Handler,
		},
		{
			MethodName: "PushStatus",
			Handler:    _Observer_PushStatus_Handler,
		},
		{
			MethodName: "Who",
			Handler:    _Observer_Who_Handler,
		},
		{
			MethodName: "RestartService",
			Handler:    _Observer_RestartService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msa/proto/msa_observer.proto",
}
